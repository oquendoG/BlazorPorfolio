// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240410233415_FullDatabaseGenerationWithIdentity")]
    partial class FullDatabaseGenerationWithIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ff835837-7cc2-4cf8-aa9e-8476675cf00e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "08efeee1-1dd5-485e-b28e-539dee8de07f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0493ec99-b063-4b40-a640-7f7b75914c82",
                            Email = "oquendo999@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OQUENDO999@GMAIL.COM",
                            NormalizedUserName = "OQUENDO999@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECEmJp0g8NllHePnzPnvtbqdGctC+TtbgdiGwouk4W9diSYSrmp5CNGp0aUtMX8w1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb8e6878-d6c3-47b0-b435-b6e5a0edea38",
                            TwoFactorEnabled = false,
                            UserName = "oquendo999@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "08efeee1-1dd5-485e-b28e-539dee8de07f",
                            RoleId = "ff835837-7cc2-4cf8-aa9e-8476675cf00e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shared.Models.Blog.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71807aab-f4b9-4d95-ad37-2268c46ac649"),
                            Description = "Description of category 1",
                            Name = "Category 1",
                            ThumbnailImage = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            Id = new Guid("c46db38f-3045-4715-a30c-ea43087e9a7b"),
                            Description = "Description of category 2",
                            Name = "Category 2",
                            ThumbnailImage = "uploads/placeholder.jpg"
                        },
                        new
                        {
                            Id = new Guid("ebc7dbe0-71dd-4374-9056-f4c8465663fe"),
                            Description = "Description of category 3",
                            Name = "Category 3",
                            ThumbnailImage = "uploads/placeholder.jpg"
                        });
                });

            modelBuilder.Entity("Shared.Models.Blog.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasMaxLength(65536)
                        .HasColumnType("TEXT");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("PublishDate")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thumbnailimage")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d7f6446-4281-4ecf-a31e-4e7f6ae1046f"),
                            Author = "Wilson OQuendo",
                            CategoryId = new Guid("71807aab-f4b9-4d95-ad37-2268c46ac649"),
                            Content = "",
                            Excerpt = "Este es un extracto del post 1.",
                            PublishDate = "10/04/2024 11:34",
                            Published = false,
                            Thumbnailimage = "uploads/placeholder.jpg",
                            Title = "Primer Post"
                        },
                        new
                        {
                            Id = new Guid("ea665317-1d23-42e0-8c9a-b904178d0e3e"),
                            Author = "Wilson OQuendo",
                            CategoryId = new Guid("c46db38f-3045-4715-a30c-ea43087e9a7b"),
                            Content = "",
                            Excerpt = "Este es un extracto del post 2.",
                            PublishDate = "10/04/2024 11:34",
                            Published = false,
                            Thumbnailimage = "uploads/placeholder.jpg",
                            Title = "Segundo Post"
                        },
                        new
                        {
                            Id = new Guid("8fff221f-3540-4863-8ba5-b33476a45061"),
                            Author = "Wilson OQuendo",
                            CategoryId = new Guid("ebc7dbe0-71dd-4374-9056-f4c8465663fe"),
                            Content = "",
                            Excerpt = "Este es un extracto del post 3.",
                            PublishDate = "10/04/2024 11:34",
                            Published = false,
                            Thumbnailimage = "uploads/placeholder.jpg",
                            Title = "Tercer Post"
                        },
                        new
                        {
                            Id = new Guid("f326012b-9c70-4e90-b3d4-7d2c2641e0ca"),
                            Author = "Wilson OQuendo",
                            CategoryId = new Guid("71807aab-f4b9-4d95-ad37-2268c46ac649"),
                            Content = "",
                            Excerpt = "Este es un extracto del post 4.",
                            PublishDate = "10/04/2024 11:34",
                            Published = false,
                            Thumbnailimage = "uploads/placeholder.jpg",
                            Title = "Cuarto Post"
                        },
                        new
                        {
                            Id = new Guid("48983034-8318-4fc3-9d34-424b635087cd"),
                            Author = "Wilson OQuendo",
                            CategoryId = new Guid("c46db38f-3045-4715-a30c-ea43087e9a7b"),
                            Content = "",
                            Excerpt = "Este es un extracto del post 5.",
                            PublishDate = "10/04/2024 11:34",
                            Published = false,
                            Thumbnailimage = "uploads/placeholder.jpg",
                            Title = "Quinto Post"
                        },
                        new
                        {
                            Id = new Guid("0d96625c-edd4-4043-b895-358bb6c8a0ac"),
                            Author = "Wilson OQuendo",
                            CategoryId = new Guid("ebc7dbe0-71dd-4374-9056-f4c8465663fe"),
                            Content = "",
                            Excerpt = "Este es un extracto del post 6.",
                            PublishDate = "10/04/2024 11:34",
                            Published = false,
                            Thumbnailimage = "uploads/placeholder.jpg",
                            Title = "Sexto Post"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.Blog.Post", b =>
                {
                    b.HasOne("Shared.Models.Blog.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.Blog.Category", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
