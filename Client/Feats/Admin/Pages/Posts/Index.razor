@page "/admin/posts"

@using System.Net;
@using System.Text.RegularExpressions;

<main class="admin-area-main">

    <SideBar></SideBar>

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1>Posts</h1>
                <br />
                <hr />
                <br />

                @if (InMemoryDataBaseCache.Posts == null || attemptingToDelete == true)
                {
                    <Loading></Loading>
                }
                else
                {
                    <a href="/admin/posts/crear" class="btn btn-success mb-3 mb-sm-0 shadow me-5 w-full md-f-size-1-5">
                        <i class="fas fa-plus"></i> Crear post
                    </a>

                    <button @onclick="() => InMemoryDataBaseCache.GetPostsFromDatabaseAndCache()" class="btn btn-primary shadow w-full md-f-size-1-5">
                        <i class="fas fa-sync"></i> Actualizar datos
                    </button>

                    <br />
                    <br />
                    <br />

                    @if (InMemoryDataBaseCache.Posts.Count < 1)
                    {
                        <h1>No se encontraron posts, por favor cree uno.</h1>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Categoría</th>
                                        <th scope="col" class="d-none d-lg-table-cell">Miniatura</th>
                                        <th scope="col">Título</th>
                                        <th scope="col">Author</th>
                                        <th scope="col">Extracto</th>
                                        <th scope="col">Fecha de publicación</th>
                                        <th scope="col">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var post in InMemoryDataBaseCache.Posts)
                                    {
                                        <tr>
                                            <th class="w-8" scope="row">
                                                <p>@post.Category.Name</p>
                                            </th>
                                            <td class="w-40 d-none d-lg-table-cell">
                                                <img src="@($"{ApiEndpoints.ServerBaseUrl}/{post.Thumbnailimage}")" class="admin-index-thumbnail-image" alt="Category thumbnail image" />
                                            </td>
                                            <td class="w-8">
                                                <p>@post.Title</p>
                                            </td>
                                            <td class="w-8">
                                                <p>@post.Author</p>
                                            </td>
                                            <td class="w-14">
                                                <p>@post.Excerpt</p>
                                            </td>
                                            <td class="w-14">
                                                <p>@(post.Published ? $"{post.PublishDate} UTC" : "No publicado")</p>
                                            </td>
                                            <td class="w-14">
                                                <div class="d-flex flex-column">
                                                    @if(post.Published is false)
                                                    {
                                                        <button @onclick="() => PublishOrUnpublishPost(post)" class="btn btn-success shadow md-f-size-1-5">
                                                            <i class="fas fa-eye"></i> Publicar
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button @onclick="() => PublishOrUnpublishPost(post)" class="btn btn-success shadow md-f-size-1-5">
                                                            <i class="fas fa-eye-slash"></i> Anular publicación
                                                        </button>
                                                    }

                                                    <br />

                                                    <a href="/admin/posts/actualizar/@post.Id.ToString()" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"></i> Actualizar
                                                    </a>

                                                    <br />

                                                    <button @onclick="(async () => await DeletePost(post))" class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"></i> Borrar
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
                <div class="position-fixed bottom-0 end-5 z-index-5">
                    @if (succesfullyDeleted)
                    {
                        <Toast IsError="false"
                               ToastTitle="El post se ha borrado correctamente"
                               ToastBody="El post se removió de la base de datos"
                               ParentMethodToCallOnClickBtnClose="() => succesfullyDeleted = false">
                        </Toast>
                    }
                    
                    @if(unsuccessfullTryToDelete)
                    {
                        <Toast IsError="true"
                               ToastTitle="El post no se borró correctamente"
                               ToastBody="@($"La razón es: {reasonUnsuccessfullTryToDelete} intente de nuevo y si el error persiste contacte al administrador")"
                               ParentMethodToCallOnClickBtnClose="() => succesfullyDeleted = false">
                        </Toast>
                    }

                    @if (successfullyPusblishOrUnpublish)
                    {
                        <Toast IsError="false"
                               ToastTitle="@($"{(lastPublishedOrUnpublishedPost.Published ? "Publicado" : "Publicación anulada")} satisfactoriamente.")"
                               ToastBody="@($"{(lastPublishedOrUnpublishedPost.Published ? "El post está ahora visble el sitio público" : "El post ya no está más visible en el sitio público")}")"
                               ParentMethodToCallOnClickBtnClose="() => succesfullyDeleted = false">
                        </Toast>
                    }

                    @if (unsuccessfullytTryToPusblishOrUnpublish)
                    {
                        <Toast IsError="true"
                               ToastTitle="la actualización de publicación falló"
                               ToastBody="Algo fue mal al comunicarse con el servidor, pruebe de nuevo o comuniquese con el administrador"
                               ParentMethodToCallOnClickBtnClose="() => succesfullyDeleted = false">
                        </Toast>
                    }
                </div>
            </div>
        </div>
    </div>
</main>

@implements IDisposable
@code {
    [Inject] InMemoryDataBaseCache InMemoryDataBaseCache { get; set; }
    [Inject] HttpClient httpClient { get; set; }

    private bool attemptingToDelete = false;
    private bool succesfullyDeleted = false;
    private bool unsuccessfullTryToDelete = false;
    private string reasonUnsuccessfullTryToDelete = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        InMemoryDataBaseCache.OnPostsDataChanged += StateHasChanged;
        if (InMemoryDataBaseCache.Posts is null)
        {
            await InMemoryDataBaseCache.GetPostsFromDatabaseAndCache();
        }
    }

    public void Dispose() => InMemoryDataBaseCache.OnPostsDataChanged -= StateHasChanged;

    public async Task DeletePost(Post post)
    {
        attemptingToDelete = true;
        HttpResponseMessage response = await httpClient.DeleteAsync($"{ApiEndpoints.s_posts}/{post.Id}");

        if (response.StatusCode != HttpStatusCode.OK)
        {
            reasonUnsuccessfullTryToDelete = $"La API no retornó un código de estado. En lugar de eso retornó: {response.StatusCode} y {response.ReasonPhrase}";
            unsuccessfullTryToDelete = true;
            attemptingToDelete = false;
            return;
        }

        if (InMemoryDataBaseCache.Posts.Remove(post))
        {
            attemptingToDelete = false;
            succesfullyDeleted = true;
            StateHasChanged();
        }
        else
        {
            reasonUnsuccessfullTryToDelete = "Un error inesperado a ocurrido, intente de nuevo o contácte al administrador del sistema";
            unsuccessfullTryToDelete = true;
        }
    }

    private bool successfullyPusblishOrUnpublish = false;
    private bool unsuccessfullytTryToPusblishOrUnpublish = false;
    private Post lastPublishedOrUnpublishedPost = new();

    private async Task PublishOrUnpublishPost(Post post)
    {
        post.Published = !post.Published;
        HttpResponseMessage httpResponse = await httpClient
            .PutAsJsonAsync<Post>(Path.Combine(ApiEndpoints.s_posts, post.Id.ToString()), post);

        if(httpResponse.StatusCode == HttpStatusCode.OK)
        {
            Post updatedPost = await httpResponse.Content.ReadFromJsonAsync<Post>();
            post = updatedPost;

            Post uneditedPostInList = await InMemoryDataBaseCache.GetPostById(post.Id);
            uneditedPostInList.Published = updatedPost.Published;
            uneditedPostInList.PublishDate = updatedPost.PublishDate;

            successfullyPusblishOrUnpublish = true;
        }else
        {
            unsuccessfullytTryToPusblishOrUnpublish = true;
        }
    }

}
