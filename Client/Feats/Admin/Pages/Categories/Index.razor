@page "/admin/categorias"
@using System.Net;
@using System.Text.RegularExpressions;

<main class="admin-area-main">

    <SideBar></SideBar>

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1>Categorías</h1>
                <br />
                <hr />
                <br />

                @if (InMemoryDataBaseCache.Categories == null || attemptingToDelete == true)
                {
                    <Loading></Loading>
                }
                else
                {
                    <a href="/admin/categorias/crear" class="btn btn-success mb-3 mb-sm-0 shadow me-5 w-full md-f-size-1-5">
                        <i class="fas fa-plus"></i> Crear categoría
                    </a>

                    <button @onclick="() => InMemoryDataBaseCache.GetCategoriesFromDatabaseAndCache(true)" class="btn btn-primary shadow w-full md-f-size-1-5">
                        <i class="fas fa-sync"></i> Actualizar datos
                    </button>

                    <br />
                    <br />
                    <br />

                    @if (InMemoryDataBaseCache.Categories.Count < 1)
                    {
                        <h1>No se encontraron categrías, por favor cree una.</h1>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Nombre</th>
                                        <th scope="col" class="d-none d-lg-table-cell">Miniatura</th>
                                        <th scope="col">Descripción</th>
                                        <th scope="col">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var category in InMemoryDataBaseCache.Categories)
                                    {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@category.Name</p>
                                            </th>
                                            <td class="w-35 d-none d-lg-table-cell">
                                                <img src="@($"{ApiEndpoints.ServerBaseUrl}/{category.ThumbnailImage}")" class="admin-index-thumbnail-image" alt="Category thumbnail image" />
                                            </td>
                                            <td class="w-15">
                                                <p>@category.Description</p>
                                            </td>
                                            <td class="w-35">
                                                <div class="d-flex flex-column">
                                                    <a href="/admin/categorias/actualizar/@category.Id" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"></i> Actualizar
                                                    </a>

                                                    <br />

                                                    <button @onclick="(() => DeleteCategory(category))" class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"></i> Borrar
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
                <div class="position-fixed bottom-0 end-5 z-index-5">
                    @if (succesfullyDeleted)
                    {
                        <Toast IsError="false"
                               ToastTitle="La categoría se ha borrado correctamente"
                               ToastBody="La categoría se removió de la base de datos"
                               ParentMethodToCallOnClickBtnClose="() => succesfullyDeleted = false">
                        </Toast>
                    }
                    
                    @if(unsuccessfullTryToDelete)
                    {
                        <Toast IsError="true"
                               ToastTitle="La categoría no se ha borrado correctamente"
                               ToastBody="@($"La razón es: {reasonUnsuccessfullTryToDelete} intente de nuevo y si el error persiste contacte al administrador")"
                               ParentMethodToCallOnClickBtnClose="() => succesfullyDeleted = false">
                        </Toast>
                    }
                </div>
            </div>
        </div>
    </div>
</main>

@implements IDisposable
@code {
    [Inject] InMemoryDataBaseCache InMemoryDataBaseCache { get; set; }
    [Inject] HttpClient httpClient { get; set; }

    private bool attemptingToDelete = false;
    private bool succesfullyDeleted = false;
    private bool unsuccessfullTryToDelete = false;
    private string reasonUnsuccessfullTryToDelete = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        InMemoryDataBaseCache.OnCategoriesDataChanged += StateHasChanged;
        if (InMemoryDataBaseCache.Categories is null)
        {
            await InMemoryDataBaseCache.GetCategoriesFromDatabaseAndCache(true);
        }
    }

    public void Dispose() => InMemoryDataBaseCache.OnCategoriesDataChanged -= StateHasChanged;

    public async void DeleteCategory(Category category)
    {
        if (category.Posts is not null && category.Posts.Count != 0)
        {
            string postsToDeleteFirst = string.Join(", ", category.Posts.Select(post => post.Title));
            postsToDeleteFirst = Regex.Replace(postsToDeleteFirst, @", (?=[^,]*$)", " y ");

            reasonUnsuccessfullTryToDelete = $"La categoría todavía tiene posts. Por favor borre los siguientes títulos primero: {postsToDeleteFirst}";
            unsuccessfullTryToDelete = true;

            attemptingToDelete = false;
            StateHasChanged();
            return;
        }

        attemptingToDelete = true;
        HttpResponseMessage response = await httpClient.DeleteAsync($"{ApiEndpoints.s_categories}/{category.Id}");

        if (response.StatusCode != HttpStatusCode.OK)
        {
            reasonUnsuccessfullTryToDelete = $"La API no retornó un código de estado. En lugar de eso retornó: {response.StatusCode} y {response.ReasonPhrase}";
            unsuccessfullTryToDelete = true;
        }

        if (InMemoryDataBaseCache.Categories.Remove(category))
        {
            succesfullyDeleted = true;
        }
        else
        {
            reasonUnsuccessfullTryToDelete = "Un error inesperado a ocurrido, intente de nuevo o contácte al administrador del sistema";
            unsuccessfullTryToDelete = true;
        }

        attemptingToDelete = false;
        StateHasChanged();
    }
}
