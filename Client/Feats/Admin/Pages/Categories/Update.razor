@using System.Net;
@page "/admin/categorias/actualizar/{CategoryId:guid}";

<AuthorizeView Roles="Administrator">
    <Authorized Context="Auth">
        <main class="admin-area-main">
            <SideBar></SideBar>

            <div class="admin-area-content container-fluid bg-white">
                <div class="row g-0">
                    <div class="col">
                        <h1 class="mb-3">@(updateSuccessful ? "Categoría actualizada correctamente" : "Actualizar categoría")</h1>
                        @if (CategoryToUpdate is null || attempingToUpdate)
                        {
                            <h2>Actualizando categoría...</h2>
                            <Loading></Loading>
                        }
                        else
                        {
                            <EditForm Model="CategoryToUpdate" OnValidSubmit="UpdateCategory">
                                <DataAnnotationsValidator />

                                <div class="form-group mb-5">
                                    <label for="Name">Nombre de la categoría</label>
                                    <InputText @bind-Value="CategoryToUpdate.Name" id="Name" class="form-control"></InputText>
                                </div>

                                <div class="form-group mb-5">
                                    <label for="ThumbnailImage">Imágen de miniatura (jpg or png 1920 * 1080)</label>
                                    @if (attemptingtoUploadImage is true)
                                    {
                                        <Loading></Loading>
                                    }
                                    else if (attemptToUploadFailed is true)
                                    {
                                        <h4 class="text-danger">Falló al cargar la imagen. @reasonImageUploadFailed</h4>
                                    }
                                    <img src="@($"{ApiEndpoints.ServerBaseUrl}/{CategoryToUpdate.ThumbnailImage}")"
                                         alt="miniatura" class="admin-crud-form-thumbnail-image" />
                                    <br />
                                    <InputFile OnChange="HandleUploadedImage" class="form-control mt-4" id="thumbnailimage"></InputFile>
                                </div>
                                <div class="form-group mb-5">
                                    <label for="Description">Descripción</label>
                                    <InputText @bind-Value="CategoryToUpdate.Description" id="Description" class="form-control"></InputText>
                                </div>

                                <ValidationSummary></ValidationSummary>

                                <button type="submit" class="btn btn-success d-block mt-5 md-f-size-1-5">
                                    <i class="far fa-save"></i> Actualizar categoría
                                </button>
                                <a href="/admin/categorias" class="btn btn-primary shadow mt-5 md-f-size-1-5">Ir a categorías</a>
                            </EditForm>
                        }

                        <div class="position-fixed bottom-0 end-50 z-index-5">

                            @if (updateSuccessful)
                            {
                                <Toast IsError="false" ToastTitle="Actualización correcta"
                                       ToastBody="La actiualización se realizó correctamente"
                                       ParentMethodToCallOnClickBtnClose="() => attemptToUploadFailed = false" />
                            }
                            @if (attempingToUpdateFailed)
                            {
                                <Toast IsError="true" ToastTitle="Actualización fallida"
                                       ToastBody="La actualización falló si el problema persiste contácte al administrador"
                                       ParentMethodToCallOnClickBtnClose="() => attemptToUploadFailed = false" />
                            }

                        </div>

                    </div>
                </div>
            </div>
        </main>
    </Authorized>
    <NotAuthorized>
        <Client.Feats.Admin.Auth.SignIn></Client.Feats.Admin.Auth.SignIn>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] InMemoryDataBaseCache InMemoryDataBaseCache { get; set; }
    [Parameter] public Guid CategoryId { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        CategoryToUpdate = await InMemoryDataBaseCache.GetCategoryById(CategoryId, false);
    }

    private Category CategoryToUpdate = new()
    {
        ThumbnailImage = Path.Combine("uploads", "placeholder.jpg"),
        Posts = new List<Post>()
    };

    private bool attempingToUpdate = false;
    private bool attempingToUpdateFailed = false;
    private bool updateSuccessful = false;

    private async Task UpdateCategory()
    {
        attempingToUpdate = true;

        HttpResponseMessage response = await HttpClient
                .PutAsJsonAsync<Category>($"{ApiEndpoints.s_categories}/{CategoryId}", CategoryToUpdate);

        if (response.StatusCode != HttpStatusCode.OK)
        {
            attempingToUpdateFailed = true;
            return;
        }

        Category UnUpdatedCategory = InMemoryDataBaseCache.Categories.SingleOrDefault(cat => cat.Id == CategoryId);
        UtilityFunctions.CopyObjectProperties(CategoryToUpdate, UnUpdatedCategory);
       
        updateSuccessful = true;

        attempingToUpdate = false;
    }

    private bool attemptingtoUploadImage = false;
    private bool attemptToUploadFailed = false;
    private string reasonImageUploadFailed = string.Empty;

    public async Task HandleUploadedImage(InputFileChangeEventArgs e)
    {
        attemptingtoUploadImage = true;
        if (e.File.ContentType != "image/jpeg" && e.File.ContentType != "image/png")
        {
            reasonImageUploadFailed = "Solo se admiten los formatos jpg y png";
            attempingToUpdateFailed = true;
        }
        else if (e.File.Size >= 32505856)
        {
            reasonImageUploadFailed = "Solo se admiten imágenes con tamaño menor a 30mb";
            attempingToUpdateFailed = true;
        }
        else
        {
            IBrowserFile UploadedImageFile = e.File;
            byte[] imageAsByteArray = new byte[UploadedImageFile.Size];

            await UploadedImageFile.OpenReadStream(32505856).ReadAsync(imageAsByteArray);
            string byteString = Convert.ToBase64String(imageAsByteArray);

            UploadedImage uploadedImage = new()
            {
                NewImageFileExtension = UploadedImageFile.Name.Substring(UploadedImageFile.Name.Length - 4),
                NewImageBase64Content = byteString,
                OldImagePath = string.Empty
            };

            HttpResponseMessage response = await HttpClient
                    .PostAsJsonAsync<UploadedImage>(ApiEndpoints.s_imageUpload, uploadedImage);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                CategoryToUpdate.ThumbnailImage = await response.Content.ReadAsStringAsync();
            }
            else
            {
                reasonImageUploadFailed = $"Algo salió mal al hacer la petición al servidor. Código {response.StatusCode}. Motivo del error: {response.ReasonPhrase}";
                attempingToUpdateFailed = true;
            }

            attemptingtoUploadImage = false;
            StateHasChanged();
        }
    }
}
