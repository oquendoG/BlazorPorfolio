@using System.Net;
@page "/admin/categorias/crear";

<main class="admin-area-main">
    <SideBar></SideBar>

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1 class="mb-3">@(createSuccessful ? "Categoría creada correctamente" : "Crear categoría")</h1>
                @if (attempingToCreate)
                {
                    <h2>Creando categoría...</h2>
                    <Loading></Loading>
                }
                else if (createSuccessful is false && attempingToCreate is false)
                {
                    <EditForm Model="CategoryToCreate" OnValidSubmit="CreateCategory">
                        <DataAnnotationsValidator />

                        <div class="form-group mb-5">
                            <label for="Name">Nombre de la categoría</label>
                            <InputText @bind-Value="CategoryToCreate.Name" id="Name" class="form-control"></InputText>
                        </div>

                        <div class="form-group mb-5">
                            <label for="ThumbnailImage">Imágen de miniatura (jpg or png 1920 * 1080)</label>
                            @if(attemptingtoUploadImage is true){
                                <Loading></Loading>
                            }else if (attemptToUploadFailed is true)
                            {
                                <h4 class="text-danger">Falló al cargar la imagen. @reasonImageUploadFailed</h4>
                            }
                            <img src="@($"{ApiEndpoints.ServerBaseUrl}/{CategoryToCreate.ThumbnailImage}")"
                                 alt="miniatura" class="admin-crud-form-thumbnail-image" />
                            <br />
                            <InputFile OnChange="HandleUploadedImage" class="form-control mt-4" id="thumbnailimage"></InputFile>
                        </div>
                        <div class="form-group mb-5">
                            <label for="Description">Descripción</label>
                            <InputText @bind-Value="CategoryToCreate.Description" id="Description" class="form-control"></InputText>
                        </div>

                        <ValidationSummary></ValidationSummary>

                        <button type="submit" class="btn btn-success d-block mt-5 md-f-size-1-5">
                            <i class="far fa-save"></i> Crear categoría
                        </button>
                    </EditForm>
                }
                <a href="/admin/categorias" class="btn btn-primary shadow mt-5 md-f-size-1-5">Ir a categorías</a>
            </div>
        </div>
    </div>
</main>

@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] InMemoryDataBaseCache InMemoryDataBaseCache { get; set; }

    private Category CategoryToCreate = new()
    {
        ThumbnailImage = Path.Combine("uploads", "placeholder.jpg"),
        Posts = new List<Post>()
    };

    private bool attempingToCreate = false;
    private bool attempingToCreateFailed;
    private bool createSuccessful = false;

    private async Task CreateCategory()
    {
        attempingToCreate = true;

        HttpResponseMessage response = await HttpClient
                .PostAsJsonAsync<Category>(ApiEndpoints.s_categories, CategoryToCreate);
        if (response.StatusCode != HttpStatusCode.Created)
        {
            attempingToCreateFailed = true;
            return;
        }

        Category addedCategory = await response.Content.ReadFromJsonAsync<Category>();
        InMemoryDataBaseCache.Categories.Add(addedCategory);
        createSuccessful = true;

        attempingToCreate = false;
    }

    private bool attemptingtoUploadImage = false;
    private bool attemptToUploadFailed = false;
    private string reasonImageUploadFailed = string.Empty;

    public async Task HandleUploadedImage(InputFileChangeEventArgs e)
    {
        attemptingtoUploadImage = true;
        if (e.File.ContentType != "image/jpeg" && e.File.ContentType != "image/png")
        {
            reasonImageUploadFailed = "Solo se admiten los formatos jpg y png";
            attempingToCreateFailed = true;
        }
        else if (e.File.Size >= 32505856)
        {
            reasonImageUploadFailed = "Solo se admiten imágenes con tamaño menor a 30mb";
            attempingToCreateFailed = true;
        }
        else
        {
            IBrowserFile UploadedImageFile = e.File;
            byte[] imageAsByteArray = new byte[UploadedImageFile.Size];

            await UploadedImageFile.OpenReadStream(32505856).ReadAsync(imageAsByteArray);
            string byteString = Convert.ToBase64String(imageAsByteArray);

            UploadedImage uploadedImage = new()
            {
                NewImageFileExtension = UploadedImageFile.Name.Substring(UploadedImageFile.Name.Length - 4),
                NewImageBase64Content = byteString,
                OldImagePath = string.Empty
            };

            HttpResponseMessage response = await HttpClient
                    .PostAsJsonAsync<UploadedImage>(ApiEndpoints.s_imageUpload, uploadedImage);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                CategoryToCreate.ThumbnailImage = await response.Content.ReadAsStringAsync();
            }
            else
            {
                reasonImageUploadFailed = $"Algo salió mal al hacer la petición al servidor. Código {response.StatusCode}. Motivo del error: {response.ReasonPhrase}";
                attempingToCreateFailed = true;
            }

            attemptingtoUploadImage = false;
            StateHasChanged();
        }
    }
}
