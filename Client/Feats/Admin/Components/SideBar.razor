﻿<div class="admin-area-sidebar bg-dark d-flex flex-column flex-shrink-0 p-3">
    <a href="/" class="btn bg-lightgray hover-bg-white text-dark my-4 shadow">
        <i class="fas fa-eye"></i> <p class="md-and-smaller-d-none d-inline">Sitio público</p>
    </a>

    <button @onclick="SignOut" class="btn bg-lightgray hover-bg-white text-dark shadow">
        <i class="fa fa-sign-out-alt"></i> <span class="md-and-smaller-d-none d-inline">Cerrar sesión</span>
    </button>

    <hr class="my-4 text-white" />

    <ul class="nav nav-pills mb-auto">
        <li class="nav-item w-100">
            <a href="@AdminIndexPageUri" class="nav-link w-100 shadow @(IsPageActive(AdminIndexPageUri) ? "active" : "text-white")">
                <i class="fas fa-home"></i><p class="md-and-smaller-d-none d-inline px-md-2">Descripción </p>
            </a>
        </li>

        <li class="nav-item w-100 mt-4">
            <a href="@s_adminCategoriesPageUri" class="nav-link w-100 shadow @(IsPageActive(s_adminCategoriesPageUri) ? "active" : "text-white")">
                <i class="fas fa-th"></i><p class="md-and-smaller-d-none d-inline px-md-2"> Categorias</p>
            </a>
        </li>

        <li class="nav-item w-100 mt-4">
            <a href="@s_adminPostsPageUri" class="nav-link w-100 shadow @(IsPageActive(s_adminPostsPageUri) ? "active" : "text-white")">
                <i class="fas fa-newspaper"></i><p class="md-and-smaller-d-none d-inline px-md-2">Posts del blog</p>
            </a>
        </li>
    </ul>
</div>

@code
{
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] HttpClient httpClient { get; set; }
    [Inject] AppAuthenticationStateProvider appAuthenticationStateProvider { get; set; }
    [Inject] ILocalStorageService localStorageService { get; set; }

    private const string AdminIndexPageUri = "/admin";
    private static string s_adminCategoriesPageUri = $"{AdminIndexPageUri}/categorias";
    private static string s_adminPostsPageUri = $"{AdminIndexPageUri}/posts";

    protected override async Task OnInitializedAsync()
    {
        await SignInWithBrowserLocalStorage();
    }

    private bool IsPageActive(string pageToCheckUri)
    {
        string[] currentUriSplit = NavigationManager.Uri
            .Split('/')
            .Skip(2)
            .ToArray();

        if (pageToCheckUri == AdminIndexPageUri)
        {
            return currentUriSplit.Last() == "admin";
        }

        string[] pageToCheckUriSplit = pageToCheckUri
            .Split('/')
            .Skip(2)
            .ToArray();

        foreach (var currentUriPart in currentUriSplit)
        {
            if (pageToCheckUriSplit.Contains(currentUriPart))
            {
                return true;
            }
        }

        return false;
    }

    private async Task SignInWithBrowserLocalStorage()
    {
        if (await localStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await localStorageService.GetItemAsync<string>("bearerToken");

            await appAuthenticationStateProvider.SignIn();

            httpClient.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }
    }

    private async Task SignOut()
    {
        if (await localStorageService.ContainKeyAsync("bearerToken"))
        {
            await localStorageService.RemoveItemAsync("bearerToken");
        }

        appAuthenticationStateProvider.SignOut();

        StateHasChanged();
    }
}